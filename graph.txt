bfs: take q insert first node in q while(!q.empty()) pop from q(insert in ans) traverse its all neihgghbourput in q if not visied   
vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<int> ans;
        vector<int>visited(V+1,0);
         for(int i=0;i<V;i++){
             if(visited[i]==0){

                queue<int>q;
                q.push(i);
                visited[i]=1;
                while(!q.empty()){ //take one node
                    int t=q.front();
                    q.pop();
                    ans.push_back(t); //pit node in ans
                    for(auto it : adj[t]){
                        if(visited[it]==0){//if not visited
                            q.push(it);//put neighbour in q
                            visited[it]=1;//mark visited
                        }
                        
                    }
                }
             }
         }
        return ans;


// detect cycle in undirected using bfs:  keep tack of parent and if anytime we visit a node which is already visited and that not parent its cycle tc:o(n+2e) space:o(n)

bool help(int src,vector<int> adj[],vector<int>& visited){
       visited[src]=1;
       queue<pair<int,int>>q;
       q.push({src,-1});
       while(!q.empty()){
           int parent=q.front().second;
           int current=q.front().first;
           q.pop();
            
           for(auto adjnode : adj[current]){
              
               if(visited[adjnode]==0){
                   visited[adjnode]=1;
                    q.push(make_pair(adjnode,current));
               }else if(parent!=adjnode){
                   return true;
               }
           }
       }
       return false;
   }
    bool isCycle(int V, vector<int> adj[]) {
        vector <int> visited(V,0);
        for(int i=0;i<V;i++){
            if(visited[i]==0 ){
                if(help(i,adj,visited))return true;
            }
        }
        return false;
    }

//detect cycle in undirected using dfs:traverse dfs and carry parent at any time if you find node which is already vidited and its not parent then iits cycle

//distinct islnad put all island in set and return size of set (for puting in set  substract x,y coordinate of each from base)

class Solution {
    private:
    void dfs(int row , int col , vector<vector<int>>& vis , vector<vector<int>>& grid , vector<pair<int,int>>& vec,int row0,int col0){
        vis[row][col] = 1;
        vec.push_back({row-row0,col-col0});
        int n = grid.size();
        int m = grid[0].size();
        
        int drow[] = {-1,0,+1,0};
        int dcol[] = {0,+1,0,-1};
      
        for(int i = 0;i<4;i++){
            int nrow =  row + drow[i];
            int ncol = col + dcol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol] == 1 ){
                dfs(nrow,ncol,vis,grid,vec,row0,col0);
            }
        }
    }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        set<vector<pair<int,int>>> st;

        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]==1){
                    vector<pair<int,int>> vec;
                    dfs(i,j,vis,grid,vec,i,j);
                    st.insert(vec);
                }
            }
        }
        return st.size();
    }
};

//check bipertite: if u can color graph with only 2 color with no neighbour of same color

bool bfs(int i,vector<int>adj[],vector<int>& color){
        color[i]=0;
        queue<int>q;
        q.push(i);
        
        while(!q.empty()){
            int curr=q.front();q.pop();
            for(auto adjcent : adj[curr]){
                if(color[adjcent]==-1){
                  color[adjcent]=!color[curr];
                  q.push(adjcent);
                }else{ //already colored
                    if(color[adjcent]==color[curr])return false;
                }
            }
        }
        return true;
    }
    bool dfs(int i,vector<int>adj[],vector<int>& color,int col,bool ans){
        if(ans==false)return false;
        color[i]=col;
        for(auto it :adj[i]){
            if(color[it]==-1){
                color[it]=!col;
               if(dfs(it,adj,color,!col,ans)==false)return false;
            }    
            else{
                if(color[it]==col)return false;
            }
        }
        return true;
    }
	bool isBipartite(int V, vector<int>adj[]){
	    vector<int>color(V,-1);
	    bool ans=true;
	    for(int i=0;i<V;i++){
	        if(color[i]==-1
){
	            if(dfs(i,adj,color,0,ans)==false)return false;
	        }
	    }     
	    return true;
	}
//topological sort 
dfs:take dfs and stack while returning from dfs store in stack that stack is topo sort

class Solution
{
	public:
	bool dfs(int i,vector<int>& visited,stack<int>& st,vector<int> adj[]){
	    visited[i]=1;
	    for(auto it:adj[i]){
	        if(visited[it]==0)dfs(it,visited,st,adj);
	    }
	    st.push(i);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    stack<int>st;
	    vector<int>visited(V,0);
	    for(int i=0;i<V;i++){
	        if(visited[i]==0)dfs(i,visited,st,adj);
	    }
	    vector<int> ans;
	    while(!st.empty()){
	        int i=st.top();
	        st.pop();
	        ans.push_back(i);
	    }
	    return ans;
	}
};

bfs topo/index bases /kahns algo:store indegree of all put inderee 0 in q while queue not empty take 1 ele from q reomve and store in answer and remove income edge from that and if after removing it becomes 0 then add in q

detecxt cycle using bfs: modify toposrot as we know topo sort is only on dag so apply topo sort if at end topo sort size is not equal to toal node then cycle

pre-requisits:
bool isPossible(int num, vector<pair<int, int> >& prerequisites) {
	    vector<int>indegree(num,0);
        vector<int>adj[num];
        for(auto it:prerequisites){
            adj[it.second].push_back(it.first);
        }

        for(int i=0;i<num;i++){
            for(auto it:adj[i]){
                indegree[it]++;
            }
        }
        
        queue<int>q;
        vector<int>ans;
        for(int i=0;i<num;i++){
            if(indegree[i]==0)q.push(i);
        }
        while(!q.empty()){
            int node=q.front();
            q.pop();
            ans.push_back(node);
            for(auto it:adj[node]){
                indegree[it]--;
                if(indegree[it]==0)q.push(it);
            }
            
        }
        return ans.size()==num;
	}
